/* eslint-disable no-restricted-globals */
/* eslint-disable no-undef */
/* importScripts('/__/firebase/7.17.1/firebase-app.js');
importScripts('/__/firebase/7.17.1/firebase-messaging.js');
importScripts('/__/firebase/init.js'); */

importScripts("https://www.gstatic.com/firebasejs/7.17.1/firebase-app.js");
importScripts(
  "https://www.gstatic.com/firebasejs/7.17.1/firebase-messaging.js"
);

// Set this to true for production
var doCache = true;

// Name our cache
var CACHE_NAME = "my-pwa-cache-v1";

// Delete old caches that are not our current one!
self.addEventListener("activate", (event) => {
  const cacheWhitelist = [CACHE_NAME];
  event.waitUntil(
    caches.keys().then((keyList) =>
      Promise.all(
        keyList.map((key) => {
          if (!cacheWhitelist.includes(key)) {
            console.log("Deleting cache: " + key);
            return caches.delete(key);
          }
        })
      )
    )
  );
});

// The first time the user starts up the PWA, 'install' is triggered.
self.addEventListener("install", function(event) {
  if (doCache) {
    event.waitUntil(
      caches.open(CACHE_NAME).then(function(cache) {
        console.log("Caches opened !");
        // Get the assets manifest so we can see what our js file is named
        // This is because webpack hashes it
        fetch("asset-manifest.json")
          .then((response) => {
            response.json();
          })
          .then((assets) => {
            // Open a cache and cache our files
            // We want to cache the page and the main.js generated by webpack
            // We could also cache any static assets like CSS or images
            /*               const urlsToCache = [
                "/",
                "/css/bootstrap/bootstrap.min.css",
                "/css/font-awesome/css/font-awesome.min.css",
                "/css/select2/select2.min.css",
                "/css/magnific-popup-css/magnific-popup.css",
                "/js/jquery/jquery.js",
                "/js/bootstrap/bootstrap.min.js",
                "/js/dropdown.js",
                "/js/validate.js",
                "/js/wow/wow.min.js",
                "/js/select2/select2.min.js",
                "/js/easing/jquery.easing.1.3.js",
                "/js/magnific-popup-js/jquery.magnific-popup.min.js",
                "/js/main.js",
                "/images/svg/Logo.svg",
                "/images/projects/1.jpg",
                "/images/projects/2.jpg",
                "/images/projects/3.jpg",
                "/images/projects/4.jpg",
                "/images/projects/5.jpg",
                "/images/projects/6.jpg",
                "/images/projects/7.jpg",
                "/images/svg/Logo.svg",

                assets["main.css"],
                assets["main.js"],
                assets["main.js.map"],
                assets["runtime-main.js"],
                assets["runtime-main.js.map"],
                assets["static/js/2.cc147e96.chunk.js"],
                assets["static/js/2.cc147e96.chunk.js.map"],
                assets["index.html"],
                assets["precache-manifest.dfd1361ffbdd6ae937385dfacb25b068.js"],
                assets["service-worker.js"],
                assets["static/css/main.15376f98.chunk.css.map"],
                assets["static/media/About.css"],
                assets["static/media/Experience.css"],
                assets["static/media/Skills.css"],
                assets["static/media/font-awesome.min.css"],
                assets["static/media/Contact.css"],
                 
              ]*/
            //cache.addAll(urlsToCache)
            console.log("cached");
          });
      })
    );
  }
});

// When the webpage goes to fetch files, we intercept that request and serve up the matching files
// if we have them
self.addEventListener("fetch", function(event) {
  if (doCache) {
    event.respondWith(
      caches.match(event.request).then(function(response) {
        return response || fetch(event.request);
      })
    );
  }
});

var firebaseConfig = {
  apiKey: "AIzaSyChn9O7MUyLFURGPvBcqd_fp9Ex9Mg5cIk",
  authDomain: "tinyspace-7d773.firebaseapp.com",
  databaseURL: "https://tinyspace-7d773.firebaseio.com",
  projectId: "tinyspace-7d773",
  storageBucket: "tinyspace-7d773.appspot.com",
  messagingSenderId: "1004886902815",
  appId: "1:1004886902815:web:5cd3bc00c6c5bb6f5a2d2a",
  measurementId: "G-K8987MGCDW",
};
// Initialize Firebase
firebase.initializeApp(firebaseConfig);

firebase.app();

const FIREBASE_MESSAGING = firebase.messaging();

FIREBASE_MESSAGING.usePublicVapidKey('BISVjK1MjDvt81JMxEKdXXvW5wQ2iaYjlbEqdN9tKEQmeCvok51oVF4BPXprEVnL5NZLxk6pciXFHVsls9G1zVE');

console.log("checking firebase variable", FIREBASE_MESSAGING);

FIREBASE_MESSAGING.setBackgroundMessageHandler(function(payload) {
  console.log('[firebase-messaging-sw.js] Received background message ', payload);
  // Customize notification here
  const notificationTitle = payload.data.title
  const notificationOptions = {
    body: payload.data.body,
    icon: "/icon.png",
    actions:[
      {
        action:payload.data.click,
        title:"open scream",
      }
    ],
    data:{url:payload.data.click}
  };

  return self.registration.showNotification(notificationTitle,
    notificationOptions);
});

self.addEventListener("notificationclick",(payload)=>{
  /* console.log("notification click",payload);
  clients.openWindow(payload.data["click_action"]);
  payload.notification.close(); */
  if(payload.action){
    //clients.openWindow(payload.action);
    clients.openWindow(payload.notification.data.url);
    }
    payload.notification.close();
})

self.addEventListener("push",payload=>{
  console.log("push event listener payload",payload);
  console.log("push event listener payload.notification",payload.notification);
  console.log("push event listener payload.data",payload.data);

})
/* self.addEventListener("message", (e) => {
  console.log("message event fires");

  if (e.data.type === "token") {     
        fetch("/pushNotification", {
          method:"POST",
          token: FIREBASE_MESSAGING.getToken(),
        }).then(console.log("Push notification enabled"))
      
      .catch((err) => {
        console.log("error getting permission :(", err);
      });
    }
  
}) */

